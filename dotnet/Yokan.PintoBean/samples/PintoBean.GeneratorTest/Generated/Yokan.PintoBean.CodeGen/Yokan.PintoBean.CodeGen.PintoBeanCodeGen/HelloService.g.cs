// <auto-generated />
#nullable enable

using System;
using System.Threading;
using System.Threading.Tasks;
using Yokan.PintoBean.Runtime;

namespace PintoBean.GeneratorTest;

public partial class HelloService : Yokan.PintoBean.Abstractions.IHelloService
{
    private readonly IServiceRegistry _registry;
    private readonly IResilienceExecutor _resilienceExecutor;
    private readonly IAspectRuntime _aspectRuntime;

    public HelloService(IServiceRegistry registry, IResilienceExecutor resilienceExecutor, IAspectRuntime aspectRuntime)
    {
        _registry = registry ?? throw new ArgumentNullException(nameof(registry));
        _resilienceExecutor = resilienceExecutor ?? throw new ArgumentNullException(nameof(resilienceExecutor));
        _aspectRuntime = aspectRuntime ?? throw new ArgumentNullException(nameof(aspectRuntime));
    }

    public async System.Threading.Tasks.Task<Yokan.PintoBean.Abstractions.HelloResponse> SayHelloAsync(Yokan.PintoBean.Abstractions.HelloRequest request, System.Threading.CancellationToken cancellationToken)
    {
        using var op = _aspectRuntime.StartOperation("Yokan.PintoBean.Abstractions.IHelloService.SayHelloAsync");
        var result = await _resilienceExecutor.ExecuteAsync(async ct => 
            await _registry.For<Yokan.PintoBean.Abstractions.IHelloService>().InvokeAsync(async (service, ct) => 
                await service.SayHelloAsync(request, cancellationToken), ct), CancellationToken.None);
        return result;
    }

    public async System.Threading.Tasks.Task<Yokan.PintoBean.Abstractions.HelloResponse> SayGoodbyeAsync(Yokan.PintoBean.Abstractions.HelloRequest request, System.Threading.CancellationToken cancellationToken)
    {
        using var op = _aspectRuntime.StartOperation("Yokan.PintoBean.Abstractions.IHelloService.SayGoodbyeAsync");
        var result = await _resilienceExecutor.ExecuteAsync(async ct => 
            await _registry.For<Yokan.PintoBean.Abstractions.IHelloService>().InvokeAsync(async (service, ct) => 
                await service.SayGoodbyeAsync(request, cancellationToken), ct), CancellationToken.None);
        return result;
    }

}
