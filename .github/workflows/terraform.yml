---
# yamllint disable rule:truthy
name: Terraform Plan & Apply
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true
on:
  push:
    branches: [main]
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
permissions:
  contents: read
  id-token: write
  security-events: write

jobs:
  tests:
    name: Python Tests & Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install test dependencies
        run: |
          pip install -r scripts/python/requirements-dev.txt --no-deps --upgrade-strategy eager || \
            pip install -r scripts/python/requirements-dev.txt
      - name: Cache test/type/lint caches
        uses: actions/cache@v4
        with:
          path: |
            .pytest_cache
            .mypy_cache
            .ruff_cache
          key: tests-caches-${{ runner.os }}-${{ hashFiles('scripts/python/requirements-dev.txt') }}
          restore-keys: |
            tests-caches-${{ runner.os }}-
      - name: Run tests with coverage
        run: |
          pytest --cov=scripts/python --cov-report=term-missing --cov-report=xml:coverage.xml
      - name: Upload coverage artifact
        if: always() && hashFiles('coverage.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
  terraform:
    needs: [tests]
    environment: dev
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: true
      SOPS_AGE_KEY: ${{ secrets.AGE_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - name: Install SOPS
        run: |
          sudo apt-get update -y
          sudo apt-get install -y sops
      # Secret scanning handled elsewhere
      - name: Write age key
        run: |
          echo "$SOPS_AGE_KEY" > infra/terraform/secrets/age.key
          chmod 600 infra/terraform/secrets/age.key
      - name: Decrypt secrets (github vars)
        run: |
          if [ -f infra/terraform/github/secrets/github-vars.json.encrypted ]; then
            sops -d infra/terraform/github/secrets/github-vars.json.encrypted > \
              infra/terraform/github/secrets/github-vars.decrypted.json
          elif [ -f infra/terraform/secrets/github-vars.json.encrypted ]; then
            sops -d infra/terraform/secrets/github-vars.json.encrypted > \
              infra/terraform/secrets/github-vars.decrypted.json
          fi
      - name: Decrypt terraform.json if present
        run: |
          if [ -f infra/terraform/secrets/terraform.json.encrypted ]; then
            sops -d infra/terraform/secrets/terraform.json.encrypted > infra/terraform/secrets/terraform.json
          elif [ -f infra/terraform/secrets/terraform.json.sops.json ]; then
            sops -d infra/terraform/secrets/terraform.json.sops.json > infra/terraform/secrets/terraform.json
          elif [ -f infra/terraform/secrets/terraform.json.encrypted.json ]; then
            sops -d infra/terraform/secrets/terraform.json.encrypted.json > infra/terraform/secrets/terraform.json
          fi
      - name: Load TFC token from decrypted terraform.json
        shell: bash
        run: |
          if [ ! -f infra/terraform/secrets/terraform.json ]; then
            echo "Decrypted terraform.json not found" >&2; exit 1; fi
          token=""
          if command -v jq >/dev/null 2>&1; then
            token=$(jq -r '.TFC_TOKEN // empty' infra/terraform/secrets/terraform.json)
          else
            token=$(python -c "import json;
              d=json.load(open('infra/terraform/secrets/terraform.json'));
              print(d.get('TFC_TOKEN',''))")
          fi
          if [ -z "$token" ] || [ "$token" = "null" ]; then
            echo "TFC_TOKEN missing in decrypted terraform.json" >&2; exit 1; fi
          echo "TFC_TOKEN retrieved from terraform.json"
          echo "TFC_TOKEN=$token" >> "$GITHUB_ENV"
      - name: Export variables to TFC
        run: |
          pwsh infra/terraform/scripts/Apply-SecretsJson.ps1 -Organization giantcroissant-lunar -Workspace pinto-bean
      - name: Terraform Init
        working-directory: infra/terraform/github
        run: terraform init -input=false
      - name: Terraform Format Check
        working-directory: infra/terraform/github
        run: terraform fmt -check -diff || (echo "Terraform fmt failed" >&2; exit 1)
      - name: Terraform Validate
        working-directory: infra/terraform/github
        run: terraform validate
      - name: Terraform Plan
        working-directory: infra/terraform/github
        run: terraform plan -input=false -no-color
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: infra/terraform/github
        run: terraform apply -auto-approve -input=false -no-color
