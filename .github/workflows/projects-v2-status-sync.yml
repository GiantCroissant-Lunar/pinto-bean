name: Project v2 Status Sync

on:
  issues:
    types: [opened, closed, reopened]

permissions:
  contents: read
  issues: write

jobs:
  sync-project-status:
    runs-on: ubuntu-latest
    steps:
      - name: Sync issue status with Project v2
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.USE_PROJECT_V2_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue = context.payload.issue;
            const action = context.payload.action;

            console.log(`üîç Processing issue #${issue.number}: ${issue.title}`);
            console.log(`üìù Action: ${action}`);

            // Determine target status based on action
            let targetStatus;
            if (action === 'opened') {
              targetStatus = 'Backlog';
              console.log(`üÜï Issue opened ‚Üí Moving to "Backlog"`);
            } else if (action === 'closed') {
              targetStatus = 'Done';
              console.log(`‚úÖ Issue closed ‚Üí Moving to "Done"`);
            } else if (action === 'reopened') {
              targetStatus = 'Backlog';
              console.log(`üîÑ Issue reopened ‚Üí Moving to "Backlog"`);
            } else {
              console.log('‚ÑπÔ∏è No status change needed for this action');
              return;
            }

            try {
              // Get issue and its project items
              const issueQuery = `
                query($owner: String!, $repo: String!, $number: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $number) {
                      id
                      title
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                            title
                            number
                          }
                        }
                      }
                    }
                  }
                }
              `;

              const issueResponse = await github.graphql(issueQuery, {
                owner,
                repo,
                number: issue.number
              });

              const issueData = issueResponse.repository.issue;
              console.log(`‚úÖ Found issue: ${issueData.title}`);

              if (!issueData.projectItems.nodes.length) {
                console.log(`üìã Issue #${issue.number} is not in any projects`);

                if (action === 'opened') {
                  console.log(`üîó Adding issue to Project #3...`);

                  // Add to project first
                  const addToProjectMutation = `
                    mutation($projectId: ID!, $contentId: ID!) {
                      addProjectV2ItemById(input: {
                        projectId: $projectId
                        contentId: $contentId
                      }) {
                        item {
                          id
                          project {
                            id
                            title
                            number
                          }
                        }
                      }
                    }
                  `;

                  // Get project ID for Project #3
                  const projectQuery = `
                    query($login: String!) {
                      user(login: $login) {
                        projectV2(number: 3) {
                          id
                          title
                        }
                      }
                    }
                  `;

                  const projectResponse = await github.graphql(projectQuery, {
                    login: 'ApprenticeGC'
                  });

                  const projectId = projectResponse.user.projectV2.id;
                  console.log(`üéØ Found Project #3: ${projectResponse.user.projectV2.title}`);

                  // Add issue to project
                  const addResponse = await github.graphql(addToProjectMutation, {
                    projectId: projectId,
                    contentId: issueData.id
                  });

                  console.log(`‚úÖ Added issue to project: ${addResponse.item.project.title}`);

                  // Update issueData to include the new project item
                  issueData.projectItems.nodes.push(addResponse.item);
                } else {
                  console.log(`‚ÑπÔ∏è Issue not in projects and action is ${action}, skipping`);
                  return;
                }
              }

              // Update status in each project
              for (const projectItem of issueData.projectItems.nodes) {
                const project = projectItem.project;
                console.log(`üìä Processing project: ${project.title} (#${project.number})`);

                // Get project Status field
                const fieldsQuery = `
                  query($projectId: ID!) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        fields(first: 20) {
                          nodes {
                            ... on ProjectV2SingleSelectField {
                              id
                              name
                              options {
                                id
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;

                const fieldsResponse = await github.graphql(fieldsQuery, {
                  projectId: project.id
                });

                const statusField = fieldsResponse.node.fields.nodes.find(
                  field => field.name && field.name.toLowerCase().includes('status')
                );

                if (!statusField) {
                  console.log(`‚ö†Ô∏è No Status field found in project ${project.title}`);
                  console.log(`üìã Available fields: ${fieldsResponse.node.fields.nodes.map(f => f.name || 'unnamed').join(', ')}`);
                  continue;
                }

                console.log(`üéØ Found Status field: ${statusField.name}`);
                console.log(`üìù Available options: ${statusField.options.map(o => o.name).join(', ')}`);

                // Find matching status option (flexible matching)
                let statusOption = statusField.options.find(
                  option => option.name === targetStatus
                );

                // If exact match not found, try variations
                if (!statusOption) {
                  const statusMap = {
                    'Backlog': ['Todo', 'To Do', 'Open', 'New', 'Triage'],
                    'Done': ['Complete', 'Completed', 'Finished', 'Closed', 'Resolved']
                  };

                  const alternatives = statusMap[targetStatus] || [];
                  for (const alt of alternatives) {
                    statusOption = statusField.options.find(
                      option => option.name === alt
                    );
                    if (statusOption) {
                      console.log(`üîÑ Using alternative status: ${alt} instead of ${targetStatus}`);
                      break;
                    }
                  }
                }

                if (!statusOption) {
                  console.log(`‚ö†Ô∏è Status option "${targetStatus}" not found in project ${project.title}`);
                  console.log(`üí° Consider adding "${targetStatus}" to your project status options`);
                  continue;
                }

                console.log(`üéØ Using status option: ${statusOption.name} (${statusOption.id})`);

                // Update project item status
                const updateMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: $projectId
                        itemId: $itemId
                        fieldId: $fieldId
                        value: {
                          singleSelectOptionId: $optionId
                        }
                      }
                    ) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;

                await github.graphql(updateMutation, {
                  projectId: project.id,
                  itemId: projectItem.id,
                  fieldId: statusField.id,
                  optionId: statusOption.id
                });

                console.log(`‚úÖ Updated project ${project.title}: Status set to "${statusOption.name}"`);

                // Add progress comment to issue
                const comment = `ü§ñ **Project Status Update**\n\n` +
                  `üìä **Project**: ${project.title}\n` +
                  `üîÑ **Status**: ${statusOption.name}\n` +
                  `‚ö° **Trigger**: Issue ${action}\n\n` +
                  `_Automated by Project v2 Status Sync workflow._`;

                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issue.number,
                  body: comment
                });

                console.log(`üí¨ Added status update comment to issue #${issue.number}`);
              }

            } catch (error) {
              console.error(`‚ùå Error updating issue #${issue.number}:`, error);

              // Add error comment
              const errorComment = `‚ùå **Project Status Update Failed**\n\n` +
                `**Error**: ${error.message}\n` +
                `**Issue**: #${issue.number}\n` +
                `**Action**: ${action}\n\n` +
                `_Please check the [workflow logs](https://github.com/${owner}/${repo}/actions) for details._`;

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: errorComment
              });
            }

            console.log('üéØ Project Status Sync Complete!');
