// Unity sample bootstrap for Yokan PintoBean service platform
// This is a compile-only demonstration showing how to wire Tier-2/3/4 assemblies

using System.Threading;
using System.Threading.Tasks;
using Yokan.PintoBean.Abstractions;
using Yokan.PintoBean.CodeGen;
using Yokan.PintoBean.Runtime;
using Yokan.PintoBean.Providers.Stub;

// Note: In actual Unity project, add: using UnityEngine;

namespace PintoBean.Unity.Sample
{
    /// <summary>
    /// Bootstrap class demonstrating Unity integration with PintoBean Analytics.
    /// This is a compile-only stub that will be wired with actual HybridCLR flow in P4-03.
    /// 
    /// In Unity: inherit from MonoBehaviour
    /// For compile testing: plain class
    /// </summary>
    public class Bootstrap // In Unity: : MonoBehaviour
    {
        /// <summary>
        /// Tier-2 Analytics service fa√ßade that realizes the IAnalytics contract.
        /// This will be properly wired with dependency injection in a later phase.
        /// </summary>
        [RealizeService(typeof(IAnalytics))]
        public partial class AnalyticsService : IAnalytics
        {
            private readonly IServiceRegistry _registry;
            private readonly IResilienceExecutor _resilienceExecutor;
            private readonly IAspectRuntime _aspectRuntime;
            private readonly ISelectionStrategyFactory _strategyFactory;

            public AnalyticsService(IServiceRegistry registry, IResilienceExecutor resilienceExecutor, 
                IAspectRuntime aspectRuntime, ISelectionStrategyFactory strategyFactory)
            {
                _registry = registry;
                _resilienceExecutor = resilienceExecutor;
                _aspectRuntime = aspectRuntime;
                _strategyFactory = strategyFactory;
            }

            public async Task Track(AnalyticsEvent analyticsEvent, CancellationToken cancellationToken = default)
            {
                // This implementation will be source-generated by the RealizeService attribute
                // For now, this is just a compile-time placeholder
                
                // In Unity: Debug.Log($"[Unity Analytics Bootstrap] Tracking event: {analyticsEvent.EventName}");
                System.Console.WriteLine($"[Unity Analytics Bootstrap] Tracking event: {analyticsEvent.EventName}");
                await Task.CompletedTask;
            }
        }

        // In Unity: void Start()
        public void Initialize()
        {
            // In Unity: Debug.Log("PintoBean Unity Sample - Bootstrap initialized");
            System.Console.WriteLine("PintoBean Unity Sample - Bootstrap initialized");
            
            // Demonstrate compile-time usage of IAnalytics.Track
            // Note: This is compile-only; actual runtime wiring comes in P4-03
            _ = DemoAnalyticsTracking();
        }

        /// <summary>
        /// Demonstrates calling IAnalytics.Track with proper event structure.
        /// This is compile-only and will be properly wired with service registry in P4-03.
        /// </summary>
        private async Task DemoAnalyticsTracking()
        {
            // Create sample analytics event
            var analyticsEvent = new AnalyticsEvent
            {
                EventName = "unity.sample.bootstrap",
                UserId = "demo-user",
                SessionId = "demo-session",
                Properties = new System.Collections.Generic.Dictionary<string, object>
                {
                    ["platform"] = "unity",
                    ["sample_type"] = "bootstrap",
                    ["version"] = "stub"
                }
            };

            // This would normally use dependency-injected service in P4-03
            // For now, just demonstrate the interface call compiles
            var analyticsService = new AnalyticsService(null!, null!, null!, null!);
            
            // In Unity: Debug.Log($"[Unity Bootstrap] Would track analytics event: {analyticsEvent.EventName}");
            System.Console.WriteLine($"[Unity Bootstrap] Would track analytics event: {analyticsEvent.EventName}");
            
            // Compile-only call - actual implementation in P4-03
            await analyticsService.Track(analyticsEvent, CancellationToken.None);
        }
    }
}